// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/vvenger/otus-highload/internal/api"

	mock "github.com/stretchr/testify/mock"
)

// UserHandler is an autogenerated mock type for the UserHandler type
type UserHandler struct {
	mock.Mock
}

// LoginPost provides a mock function with given fields: ctx, req
func (_m *UserHandler) LoginPost(ctx context.Context, req api.OptLoginPostReq) (api.LoginPostRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for LoginPost")
	}

	var r0 api.LoginPostRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, api.OptLoginPostReq) (api.LoginPostRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, api.OptLoginPostReq) api.LoginPostRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.LoginPostRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, api.OptLoginPostReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserGetIDGet provides a mock function with given fields: ctx, params
func (_m *UserHandler) UserGetIDGet(ctx context.Context, params api.UserGetIDGetParams) (api.UserGetIDGetRes, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UserGetIDGet")
	}

	var r0 api.UserGetIDGetRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, api.UserGetIDGetParams) (api.UserGetIDGetRes, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, api.UserGetIDGetParams) api.UserGetIDGetRes); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.UserGetIDGetRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, api.UserGetIDGetParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRegisterPost provides a mock function with given fields: ctx, req
func (_m *UserHandler) UserRegisterPost(ctx context.Context, req api.OptUserRegisterPostReq) (api.UserRegisterPostRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UserRegisterPost")
	}

	var r0 api.UserRegisterPostRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, api.OptUserRegisterPostReq) (api.UserRegisterPostRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, api.OptUserRegisterPostReq) api.UserRegisterPostRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.UserRegisterPostRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, api.OptUserRegisterPostReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserHandler creates a new instance of UserHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserHandler {
	mock := &UserHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
